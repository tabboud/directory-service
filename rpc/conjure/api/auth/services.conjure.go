// This file was generated by Conjure and should not be manually edited.

package auth

import (
	"context"

	"github.com/palantir/conjure-go-runtime/v2/conjure-go-client/httpclient"
	werror "github.com/palantir/witchcraft-go-error"
)

// Auth service provides functionality to log in/out of the service.
type AuthServiceV1Client interface {
	/*
	   Login to the service with a username/password.
	   Returns an InvalidLoginRequest error if the request was invalid.
	*/
	Login(ctx context.Context, requestArg LoginRequestV1) (LoginResponseV1, error)
}

type authServiceV1Client struct {
	client httpclient.Client
}

func NewAuthServiceV1Client(client httpclient.Client) AuthServiceV1Client {
	return &authServiceV1Client{client: client}
}

func (c *authServiceV1Client) Login(ctx context.Context, requestArg LoginRequestV1) (LoginResponseV1, error) {
	var defaultReturnVal LoginResponseV1
	var returnVal *LoginResponseV1
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("Login"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/v1/auth/login"))
	requestParams = append(requestParams, httpclient.WithJSONRequest(requestArg))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	if _, err := c.client.Do(ctx, requestParams...); err != nil {
		return defaultReturnVal, werror.WrapWithContextParams(ctx, err, "login failed")
	}
	if returnVal == nil {
		return defaultReturnVal, werror.ErrorWithContextParams(ctx, "login response cannot be nil")
	}
	return *returnVal, nil
}
