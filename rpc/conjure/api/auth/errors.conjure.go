// This file was generated by Conjure and should not be manually edited.

package auth

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/palantir/conjure-go-runtime/v2/conjure-go-contract/errors"
	"github.com/palantir/pkg/safejson"
	"github.com/palantir/pkg/safeyaml"
	"github.com/palantir/pkg/uuid"
	werror "github.com/palantir/witchcraft-go-error"
)

type internalError struct {
	// The reason for the internal error
	Reason string `conjure-docs:"The reason for the internal error" json:"reason"`
}

func (o internalError) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *internalError) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

// NewInternalError returns new instance of InternalError error.
func NewInternalError(reasonArg string) *InternalError {
	return &InternalError{errorInstanceID: uuid.NewUUID(), stack: werror.NewStackTrace(), internalError: internalError{Reason: reasonArg}}
}

// WrapWithInternalError returns new instance of InternalError error wrapping an existing error.
func WrapWithInternalError(err error, reasonArg string) *InternalError {
	return &InternalError{errorInstanceID: uuid.NewUUID(), stack: werror.NewStackTrace(), cause: err, internalError: internalError{Reason: reasonArg}}
}

// InternalError is an error type.
/*
An internal error has occured.
The specific reason is specified in the "reason" argument.
*/
type InternalError struct {
	errorInstanceID uuid.UUID
	internalError
	cause error
	stack werror.StackTrace
}

// IsInternalError returns true if err is an instance of InternalError.
func IsInternalError(err error) bool {
	if err == nil {
		return false
	}
	_, ok := errors.GetConjureError(err).(*InternalError)
	return ok
}

func (e *InternalError) Error() string {
	return fmt.Sprintf("INTERNAL Auth:InternalError (%s)", e.errorInstanceID)
}

// Cause returns the underlying cause of the error, or nil if none.
// Note that cause is not serialized and sent over the wire.
func (e *InternalError) Cause() error {
	return e.cause
}

// StackTrace returns the StackTrace for the error, or nil if none.
// Note that stack traces are not serialized and sent over the wire.
func (e *InternalError) StackTrace() werror.StackTrace {
	return e.stack
}

// Message returns the message body for the error.
func (e *InternalError) Message() string {
	return "INTERNAL Auth:InternalError"
}

// Format implements fmt.Formatter, a requirement of werror.Werror.
func (e *InternalError) Format(state fmt.State, verb rune) {
	werror.Format(e, e.safeParams(), state, verb)
}

// Code returns an enum describing error category.
func (e *InternalError) Code() errors.ErrorCode {
	return errors.Internal
}

// Name returns an error name identifying error type.
func (e *InternalError) Name() string {
	return "Auth:InternalError"
}

// InstanceID returns unique identifier of this particular error instance.
func (e *InternalError) InstanceID() uuid.UUID {
	return e.errorInstanceID
}

// Parameters returns a set of named parameters detailing this particular error instance.
func (e *InternalError) Parameters() map[string]interface{} {
	return map[string]interface{}{"reason": e.Reason}
}

// safeParams returns a set of named safe parameters detailing this particular error instance.
func (e *InternalError) safeParams() map[string]interface{} {
	return map[string]interface{}{"reason": e.Reason, "errorInstanceId": e.errorInstanceID, "errorName": e.Name()}
}

// SafeParams returns a set of named safe parameters detailing this particular error instance and
// any underlying causes.
func (e *InternalError) SafeParams() map[string]interface{} {
	safeParams, _ := werror.ParamsFromError(e.cause)
	for k, v := range e.safeParams() {
		if _, exists := safeParams[k]; !exists {
			safeParams[k] = v
		}
	}
	return safeParams
}

// unsafeParams returns a set of named unsafe parameters detailing this particular error instance.
func (e *InternalError) unsafeParams() map[string]interface{} {
	return map[string]interface{}{}
}

// UnsafeParams returns a set of named unsafe parameters detailing this particular error instance and
// any underlying causes.
func (e *InternalError) UnsafeParams() map[string]interface{} {
	_, unsafeParams := werror.ParamsFromError(e.cause)
	for k, v := range e.unsafeParams() {
		if _, exists := unsafeParams[k]; !exists {
			unsafeParams[k] = v
		}
	}
	return unsafeParams
}

func (e InternalError) MarshalJSON() ([]byte, error) {
	parameters, err := safejson.Marshal(e.internalError)
	if err != nil {
		return nil, err
	}
	return safejson.Marshal(errors.SerializableError{ErrorCode: errors.Internal, ErrorName: "Auth:InternalError", ErrorInstanceID: e.errorInstanceID, Parameters: json.RawMessage(parameters)})
}

func (e *InternalError) UnmarshalJSON(data []byte) error {
	var serializableError errors.SerializableError
	if err := safejson.Unmarshal(data, &serializableError); err != nil {
		return err
	}
	var parameters internalError
	if err := safejson.Unmarshal([]byte(serializableError.Parameters), &parameters); err != nil {
		return err
	}
	e.errorInstanceID = serializableError.ErrorInstanceID
	e.internalError = parameters
	return nil
}

type invalidLoginCredentials struct {
	Username string `json:"username"`
}

func (o invalidLoginCredentials) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *invalidLoginCredentials) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

// NewInvalidLoginCredentials returns new instance of InvalidLoginCredentials error.
func NewInvalidLoginCredentials(usernameArg string) *InvalidLoginCredentials {
	return &InvalidLoginCredentials{errorInstanceID: uuid.NewUUID(), stack: werror.NewStackTrace(), invalidLoginCredentials: invalidLoginCredentials{Username: usernameArg}}
}

// WrapWithInvalidLoginCredentials returns new instance of InvalidLoginCredentials error wrapping an existing error.
func WrapWithInvalidLoginCredentials(err error, usernameArg string) *InvalidLoginCredentials {
	return &InvalidLoginCredentials{errorInstanceID: uuid.NewUUID(), stack: werror.NewStackTrace(), cause: err, invalidLoginCredentials: invalidLoginCredentials{Username: usernameArg}}
}

// InvalidLoginCredentials is an error type.
// The provided user could not be authenticated to login.
type InvalidLoginCredentials struct {
	errorInstanceID uuid.UUID
	invalidLoginCredentials
	cause error
	stack werror.StackTrace
}

// IsInvalidLoginCredentials returns true if err is an instance of InvalidLoginCredentials.
func IsInvalidLoginCredentials(err error) bool {
	if err == nil {
		return false
	}
	_, ok := errors.GetConjureError(err).(*InvalidLoginCredentials)
	return ok
}

func (e *InvalidLoginCredentials) Error() string {
	return fmt.Sprintf("PERMISSION_DENIED Login:InvalidLoginCredentials (%s)", e.errorInstanceID)
}

// Cause returns the underlying cause of the error, or nil if none.
// Note that cause is not serialized and sent over the wire.
func (e *InvalidLoginCredentials) Cause() error {
	return e.cause
}

// StackTrace returns the StackTrace for the error, or nil if none.
// Note that stack traces are not serialized and sent over the wire.
func (e *InvalidLoginCredentials) StackTrace() werror.StackTrace {
	return e.stack
}

// Message returns the message body for the error.
func (e *InvalidLoginCredentials) Message() string {
	return "PERMISSION_DENIED Login:InvalidLoginCredentials"
}

// Format implements fmt.Formatter, a requirement of werror.Werror.
func (e *InvalidLoginCredentials) Format(state fmt.State, verb rune) {
	werror.Format(e, e.safeParams(), state, verb)
}

// Code returns an enum describing error category.
func (e *InvalidLoginCredentials) Code() errors.ErrorCode {
	return errors.PermissionDenied
}

// Name returns an error name identifying error type.
func (e *InvalidLoginCredentials) Name() string {
	return "Login:InvalidLoginCredentials"
}

// InstanceID returns unique identifier of this particular error instance.
func (e *InvalidLoginCredentials) InstanceID() uuid.UUID {
	return e.errorInstanceID
}

// Parameters returns a set of named parameters detailing this particular error instance.
func (e *InvalidLoginCredentials) Parameters() map[string]interface{} {
	return map[string]interface{}{"username": e.Username}
}

// safeParams returns a set of named safe parameters detailing this particular error instance.
func (e *InvalidLoginCredentials) safeParams() map[string]interface{} {
	return map[string]interface{}{"username": e.Username, "errorInstanceId": e.errorInstanceID, "errorName": e.Name()}
}

// SafeParams returns a set of named safe parameters detailing this particular error instance and
// any underlying causes.
func (e *InvalidLoginCredentials) SafeParams() map[string]interface{} {
	safeParams, _ := werror.ParamsFromError(e.cause)
	for k, v := range e.safeParams() {
		if _, exists := safeParams[k]; !exists {
			safeParams[k] = v
		}
	}
	return safeParams
}

// unsafeParams returns a set of named unsafe parameters detailing this particular error instance.
func (e *InvalidLoginCredentials) unsafeParams() map[string]interface{} {
	return map[string]interface{}{}
}

// UnsafeParams returns a set of named unsafe parameters detailing this particular error instance and
// any underlying causes.
func (e *InvalidLoginCredentials) UnsafeParams() map[string]interface{} {
	_, unsafeParams := werror.ParamsFromError(e.cause)
	for k, v := range e.unsafeParams() {
		if _, exists := unsafeParams[k]; !exists {
			unsafeParams[k] = v
		}
	}
	return unsafeParams
}

func (e InvalidLoginCredentials) MarshalJSON() ([]byte, error) {
	parameters, err := safejson.Marshal(e.invalidLoginCredentials)
	if err != nil {
		return nil, err
	}
	return safejson.Marshal(errors.SerializableError{ErrorCode: errors.PermissionDenied, ErrorName: "Login:InvalidLoginCredentials", ErrorInstanceID: e.errorInstanceID, Parameters: json.RawMessage(parameters)})
}

func (e *InvalidLoginCredentials) UnmarshalJSON(data []byte) error {
	var serializableError errors.SerializableError
	if err := safejson.Unmarshal(data, &serializableError); err != nil {
		return err
	}
	var parameters invalidLoginCredentials
	if err := safejson.Unmarshal([]byte(serializableError.Parameters), &parameters); err != nil {
		return err
	}
	e.errorInstanceID = serializableError.ErrorInstanceID
	e.invalidLoginCredentials = parameters
	return nil
}

type invalidLoginRequest struct {
	MissingFields []string `json:"missingFields"`
}

func (o invalidLoginRequest) MarshalJSON() ([]byte, error) {
	if o.MissingFields == nil {
		o.MissingFields = make([]string, 0)
	}
	type invalidLoginRequestAlias invalidLoginRequest
	return safejson.Marshal(invalidLoginRequestAlias(o))
}

func (o *invalidLoginRequest) UnmarshalJSON(data []byte) error {
	type invalidLoginRequestAlias invalidLoginRequest
	var rawinvalidLoginRequest invalidLoginRequestAlias
	if err := safejson.Unmarshal(data, &rawinvalidLoginRequest); err != nil {
		return err
	}
	if rawinvalidLoginRequest.MissingFields == nil {
		rawinvalidLoginRequest.MissingFields = make([]string, 0)
	}
	*o = invalidLoginRequest(rawinvalidLoginRequest)
	return nil
}

func (o invalidLoginRequest) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *invalidLoginRequest) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

// NewInvalidLoginRequest returns new instance of InvalidLoginRequest error.
func NewInvalidLoginRequest(missingFieldsArg []string) *InvalidLoginRequest {
	return &InvalidLoginRequest{errorInstanceID: uuid.NewUUID(), stack: werror.NewStackTrace(), invalidLoginRequest: invalidLoginRequest{MissingFields: missingFieldsArg}}
}

// WrapWithInvalidLoginRequest returns new instance of InvalidLoginRequest error wrapping an existing error.
func WrapWithInvalidLoginRequest(err error, missingFieldsArg []string) *InvalidLoginRequest {
	return &InvalidLoginRequest{errorInstanceID: uuid.NewUUID(), stack: werror.NewStackTrace(), cause: err, invalidLoginRequest: invalidLoginRequest{MissingFields: missingFieldsArg}}
}

// InvalidLoginRequest is an error type.
// Login request was invalid. Returned from /auth/login.
type InvalidLoginRequest struct {
	errorInstanceID uuid.UUID
	invalidLoginRequest
	cause error
	stack werror.StackTrace
}

// IsInvalidLoginRequest returns true if err is an instance of InvalidLoginRequest.
func IsInvalidLoginRequest(err error) bool {
	if err == nil {
		return false
	}
	_, ok := errors.GetConjureError(err).(*InvalidLoginRequest)
	return ok
}

func (e *InvalidLoginRequest) Error() string {
	return fmt.Sprintf("INVALID_ARGUMENT Login:InvalidLoginRequest (%s)", e.errorInstanceID)
}

// Cause returns the underlying cause of the error, or nil if none.
// Note that cause is not serialized and sent over the wire.
func (e *InvalidLoginRequest) Cause() error {
	return e.cause
}

// StackTrace returns the StackTrace for the error, or nil if none.
// Note that stack traces are not serialized and sent over the wire.
func (e *InvalidLoginRequest) StackTrace() werror.StackTrace {
	return e.stack
}

// Message returns the message body for the error.
func (e *InvalidLoginRequest) Message() string {
	return "INVALID_ARGUMENT Login:InvalidLoginRequest"
}

// Format implements fmt.Formatter, a requirement of werror.Werror.
func (e *InvalidLoginRequest) Format(state fmt.State, verb rune) {
	werror.Format(e, e.safeParams(), state, verb)
}

// Code returns an enum describing error category.
func (e *InvalidLoginRequest) Code() errors.ErrorCode {
	return errors.InvalidArgument
}

// Name returns an error name identifying error type.
func (e *InvalidLoginRequest) Name() string {
	return "Login:InvalidLoginRequest"
}

// InstanceID returns unique identifier of this particular error instance.
func (e *InvalidLoginRequest) InstanceID() uuid.UUID {
	return e.errorInstanceID
}

// Parameters returns a set of named parameters detailing this particular error instance.
func (e *InvalidLoginRequest) Parameters() map[string]interface{} {
	return map[string]interface{}{"missingFields": e.MissingFields}
}

// safeParams returns a set of named safe parameters detailing this particular error instance.
func (e *InvalidLoginRequest) safeParams() map[string]interface{} {
	return map[string]interface{}{"missingFields": e.MissingFields, "errorInstanceId": e.errorInstanceID, "errorName": e.Name()}
}

// SafeParams returns a set of named safe parameters detailing this particular error instance and
// any underlying causes.
func (e *InvalidLoginRequest) SafeParams() map[string]interface{} {
	safeParams, _ := werror.ParamsFromError(e.cause)
	for k, v := range e.safeParams() {
		if _, exists := safeParams[k]; !exists {
			safeParams[k] = v
		}
	}
	return safeParams
}

// unsafeParams returns a set of named unsafe parameters detailing this particular error instance.
func (e *InvalidLoginRequest) unsafeParams() map[string]interface{} {
	return map[string]interface{}{}
}

// UnsafeParams returns a set of named unsafe parameters detailing this particular error instance and
// any underlying causes.
func (e *InvalidLoginRequest) UnsafeParams() map[string]interface{} {
	_, unsafeParams := werror.ParamsFromError(e.cause)
	for k, v := range e.unsafeParams() {
		if _, exists := unsafeParams[k]; !exists {
			unsafeParams[k] = v
		}
	}
	return unsafeParams
}

func (e InvalidLoginRequest) MarshalJSON() ([]byte, error) {
	parameters, err := safejson.Marshal(e.invalidLoginRequest)
	if err != nil {
		return nil, err
	}
	return safejson.Marshal(errors.SerializableError{ErrorCode: errors.InvalidArgument, ErrorName: "Login:InvalidLoginRequest", ErrorInstanceID: e.errorInstanceID, Parameters: json.RawMessage(parameters)})
}

func (e *InvalidLoginRequest) UnmarshalJSON(data []byte) error {
	var serializableError errors.SerializableError
	if err := safejson.Unmarshal(data, &serializableError); err != nil {
		return err
	}
	var parameters invalidLoginRequest
	if err := safejson.Unmarshal([]byte(serializableError.Parameters), &parameters); err != nil {
		return err
	}
	e.errorInstanceID = serializableError.ErrorInstanceID
	e.invalidLoginRequest = parameters
	return nil
}

func init() {
	errors.RegisterErrorType("Auth:InternalError", reflect.TypeOf(InternalError{}))
	errors.RegisterErrorType("Login:InvalidLoginCredentials", reflect.TypeOf(InvalidLoginCredentials{}))
	errors.RegisterErrorType("Login:InvalidLoginRequest", reflect.TypeOf(InvalidLoginRequest{}))
}
